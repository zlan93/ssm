<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- 自动扫描 -->
	<context:component-scan base-package="com.eport.gnss.web" >
		<!--Spring容器优先加载由ServletContextListener（对应web.xml下contextConfigLocation下写的xml）产生的父容器，而SpringMVC（对应spring-mvc.xml）产生的是子容器。
		子容器Controller进行扫描装配时装配的@Service注解的实例是没有经过事务加强处理，即没有事务处理能力的Service，而父容器进行初始化的Service是保证事务的增强处理能力的。
		如果不在子容器中将Service exclude掉，此时得到的将是原样的无事务处理能力的Service，因为在多上下文的情况下，如果同一个bean被定义两次，后面一个优先。-->
		<!--简单的说就是spring-mybatis.xml先于spring-mvc.xml加载，这时候controller装配的service还没注入事物管理，所以先去除对controller的扫描-->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="/WEB-INF/jdbc_dev.properties" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxActive" value="${maxActive}" />
		<property name="maxIdle" value="${maxIdle}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxWait" value="${maxWait}" />
	</bean>
    <!--使用jndi连接数据库,详见https://note.wiz.cn?dc=8dc555ed-ff67-4114-974c-3e8108bfc0ba&kb=&cmd=km%2C-->
	<!--<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">-->
		<!--<property name="jndiName" value="java:comp/env/beidouDataSourceJNDI"/>-->
	<!--</bean>-->

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations"
				  value="classpath:com/eport/gnss/web/model/**/mapper/*.xml" />
		<!--因为IDEA无法编译非resource下的xml文件，所以把mapper移到resource下面-->
		<!--<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>-->
		<!--<property name="plugins">
			<list>
				<bean id="paginationInterceptor" class="com.example.web.paginator.PaginationInterceptor">
					<property name="dialectClass"
						value="com.eport.gnss.web.paginator.dialect.OracleDialect" />
				</bean>
			</list>
		</property>-->
	</bean>

	<!-- db_DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean id="mapperScanner1" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.eport.gnss.web.model.db.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- ext_DAO接口所在包名，Spring会自动查找其下的类 -->
	<!--<bean id="mapperScanner2" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.eport.gnss.web.model.ext.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>-->

	<!-- (事务管理)transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 常用方法默认事物管理，其他需要的写标签或者自己配置-->
	<aop:config>
		<aop:pointcut id="interceptorPointCuts"
					  expression="execution(* com.eport.gnss.web.service..*Impl.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts"/>
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<!--<tx:method name="query*" propagation="SUPPORTS" read-only="true" />-->
			<!--<tx:method name="load*" propagation="SUPPORTS" read-only="true" />-->
			<!--<tx:method name="find*" propagation="SUPPORTS" read-only="true" />-->
			<!--
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/> -->
		</tx:attributes>
	</tx:advice>
	<!--声明使用注解式事务-->
	<tx:annotation-driven transaction-manager="transactionManager" />


</beans>